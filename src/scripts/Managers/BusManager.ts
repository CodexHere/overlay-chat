/**
 * Manages MiddlewareChain and Event Buses
 *
 * @module
 */

import { BusContextProvider } from '../ContextProviders/BusContextProvider.js';
import { BusManagerContext_Init, BusManagerEmitter, BusManagerEvents } from '../types/Managers.js';
import { PluginInstance } from '../types/Plugin.js';
import { EnhancedEventEmitter } from '../utils/EnhancedEventEmitter.js';
import { MiddlewareChain, SilentlyFailChainError } from '../utils/Middleware.js';

/**
 * Type Guard for determining if an object is truly a `SilentlyFailChainError`
 *
 * @param err - An Error of unknown type.
 */
function isSilentlyFailChainError(err: unknown): err is SilentlyFailChainError {
  if (!err || false === err instanceof Error) {
    return false;
  }

  if (err && err.cause) {
    return Object.hasOwn((err as SilentlyFailChainError).cause, 'silentlyFailChain');
  }

  return false;
}

/**
 * Manages {@link MiddlewareChain | `MiddlewareChain`} and Event Buses.
 *
 * Protects {@link MiddlewareChain | `MiddlewareChain`} Execution by limiting it to the {@link types/Plugin.PluginInstance | `PluginInstance`} that *first* Registered with the Application.
 * > If you're writing a Plugin and need to be higher in the Chain, set your {@link PluginInstance.priority | `Priority`} to a lower value to load earlier (but be reasonable!).
 *
 * @typeParam PluginSettings - Shape of the Settings object the Plugin can access.
 */
export class BusManager {
  /** `EventEmitter` instance for all Events in the Application to broadcast on. */
  emitter: BusManagerEmitter = new EnhancedEventEmitter();
  /** Mapping of a Symbol generated by the first {@link PluginInstance | `PluginInstance`} to a {@link MiddlewareChain | `MiddlewareChain`} name. */
  pluginMap: Map<string, Symbol> = new Map();
  /** Mapping of Chain Name to a {@link MiddlewareChain | `MiddlewareChain`}. */
  chainMap: Map<string, MiddlewareChain> = new Map();
  /** Our Context Provider for this Manager. */
  context?: BusContextProvider;

  /**
   * Initialize `BusManager` for executing {@link MiddlewareChain | `MiddlewareChain`}s.
   */
  async init() {
    this.context = new BusContextProvider(this);
    // Register "Middleware Execute" event to execute Chain
    this.emitter.on(BusManagerEvents.MIDDLEWARE_EXECUTE, this.startMiddlewareChainByName);
  }

  /**
   * Mark the `EventEmitter` as not allowing anymore `Listeners` to be added.
   *
   * > After calling this, attempting to call `on` or `addListener` on the `EventEmitter`
   * will throw an `Error`!
   */
  disableAddingListeners() {
    this.emitter.disableAddingListeners = true;
  }

  /**
   * Reset the `BusManager` by clearing all Chain, Mapping, and removing all Event `Listeners`.
   * TODO: Determine if this is necessary still???
   */
  reset = () => {
    this.chainMap.clear();
    this.pluginMap.clear();
    this.emitter.disableAddingListeners = false;
    this.emitter.removeAllListeners();
  };

  /**
   * On an Event Trigger, we need to start a {@link MiddlewareChain | `MiddlewareChain`} by name,
   * as well as ensure the Plugin causing the Trigger is the very same that first Registered the
   * {@link MiddlewareChain | `MiddlewareChain`} attempting to be Executed.
   *
   * @param ctx - Initiating Context Object, housing the initial state of the Chain Context, as well as Plugin reference.
   */
  private startMiddlewareChainByName = async (ctx: BusManagerContext_Init) => {
    const links = this.chainMap.get(ctx.chainName);

    if (!links) {
      throw new Error('Middleware Chain does not exist: ' + ctx.chainName);
    }

    const leaderPlugin = this.pluginMap.get(ctx.chainName);

    if (false === (ctx.initiatingPlugin.ref === leaderPlugin)) {
      throw new Error(`This Plugin did not initiate this middleware (${ctx.chainName}): ${ctx.initiatingPlugin.name}`);
    }

    try {
      console.log(`Starting Chain: ${ctx.chainName}`);
      await links.execute(ctx.initialContext);
      console.log(`Ending Chain: ${ctx.chainName}`);
    } catch (err) {
      if (true === isSilentlyFailChainError(err)) {
        console.log(`Chain Catch - Force Fail Chain: ${ctx.chainName}`);
      } else {
        console.log(`Error in Chain: ${ctx.chainName}`);
        throw err;
      }
    }
  };
}
